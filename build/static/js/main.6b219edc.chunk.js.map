{"version":3,"sources":["vendor/media/mp4/bg.mp4","FrontPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","FrontPage","React","useState","state","setstate","className","playsInline","autoPlay","muted","loop","src","Video","type","style","height","color","name","placeholder","aria-label","aria-describedby","onBlur","e","preventDefault","console","log","target","value","message","error","id","onClick","notification","info","description","guest_status","placement","href","rel","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,gC,uMC0E5BC,EAtEG,WAAO,IAAD,EACGC,IAAMC,SAAS,IADlB,mBACfC,EADe,KACTC,EADS,KAsBtB,OAAO,oCACL,yBAAKC,UAAU,YACf,2BAAOC,YAAY,cAAcC,UAAQ,EAACC,MAAM,QAAQC,KAAK,QAC3D,4BAAQC,IAAKC,IAAOC,KAAK,eAG7B,yBAAKP,UAAU,YACb,yBAAKA,UAAU,gBACf,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,iBAAiBQ,MAAO,CAACC,OAAO,UAC7C,yBAAKT,UAAU,4CACb,wBAAIA,UAAU,OAAOQ,MAAO,CAACE,MAAM,SAAnC,cACA,uBAAGV,UAAU,QAAb,2GAA4H,6CAA5H,0CAA2L,2CAC3L,yBAAKA,UAAU,sCACb,2BAAOO,KAAK,OAAOI,KAAK,eAAeX,UAAU,eAAeY,YAAY,qBAAqBC,aAAW,iBAAiBC,mBAAiB,gBAAgBC,OAlCrJ,SAAAC,GACnBA,EAAEC,iBACFC,QAAQC,IAAIH,EAAEI,OAAOT,KAAKK,EAAEI,OAAOC,OAFX,MAGAL,EAAEI,OAAlBT,EAHgB,EAGhBA,KAAMU,EAHU,EAGVA,MACXA,EACDtB,EAAS,eAAID,EAAL,eAAaa,EAAQU,KAE7BC,IAAQC,MAAM,kCA4BN,yBAAKvB,UAAU,sBACb,4BAAQA,UAAU,oBAAoBO,KAAK,SAASiB,GAAG,gBAAgBC,QA1BjE,SAAAT,GAClBA,EAAEC,iBACFS,IAAaC,KAAK,CAChBL,QAAQ,eACRM,YAAY,iDAAD,cAAmD9B,QAAnD,IAAmDA,OAAnD,EAAmDA,EAAO+B,cACrEC,UAAY,eAqBF,sBASd,yBAAK9B,UAAU,gBACb,wBAAIA,UAAU,kCACZ,wBAAIA,UAAU,sBACZ,uBAAG+B,KAAK,kCAAkCX,OAAO,SAASY,IAAI,uBAC5D,uBAAGhC,UAAU,qBAGjB,wBAAIA,UAAU,sBACZ,uBAAG+B,KAAK,8CAA8CX,OAAO,SAASY,IAAI,uBACxE,uBAAGhC,UAAU,wBAGjB,wBAAIA,UAAU,sBACZ,uBAAG+B,KAAK,gCAAgCX,OAAO,SAASY,IAAI,uBAC1D,uBAAGhC,UAAU,2BCxDRiC,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1B,GACLL,QAAQK,MAAMA,EAAMD,c","file":"static/js/main.6b219edc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.6e3daaaa.mp4\";","import React from 'react';\r\nimport { notification, message } from 'antd';\r\nimport Video from './vendor/media/mp4/bg.mp4';\r\n\r\nconst FrontPage = () => {\r\n  const [state,setstate] = React.useState({});\r\n  \r\n  const handleChange = e => {\r\n    e.preventDefault();\r\n    console.log(e.target.name,e.target.value);\r\n    const { name, value } = e.target;\r\n    if(value){\r\n      setstate({...state, [name] : value });\r\n    }else{\r\n      message.error('Can not display empty notes');\r\n    }\r\n  };\r\n  const handleClick = e => {\r\n    e.preventDefault();\r\n    notification.info({\r\n      message: `Notification`,\r\n      description: `Halo, Welcome to my page, here your message : ${state?.guest_status}`,\r\n      placement : 'topRight',\r\n    });\r\n  };\r\n\r\n  return(<>\r\n    <div className=\"overlay\"></div>\r\n    <video playsInline=\"playsinline\" autoPlay muted=\"muted\" loop=\"loop\">\r\n      <source src={Video} type=\"video/mp4\" />\r\n    </video>\r\n\r\n  <div className=\"masthead\">\r\n    <div className=\"masthead-bg\"></div>\r\n    <div className=\"container h-100\">\r\n      <div className=\"row h-100\">\r\n        <div className=\"col-12 my-auto\" style={{height:'100vh'}}>\r\n          <div className=\"masthead-content text-white py-5 py-md-0\">\r\n            <h1 className=\"mb-3\" style={{color:'#eee'}}>On Going !</h1>\r\n            <p className=\"mb-5\">Hi, It's me, Riventus from Jakarta, Indonesia, nice to meet you! Thanks for see my landing page. I love <code>programming</code> and improve myself to be great on it. <strong>ENJOY!</strong></p>\r\n            <div className=\"input-group input-group-newsletter\">\r\n              <input type=\"text\" name=\"guest_status\" className=\"form-control\" placeholder=\"Enter you notes...\" aria-label=\"Enter notes...\" aria-describedby=\"submit-button\" onBlur={handleChange} />\r\n              <div className=\"input-group-append\">\r\n                <button className=\"btn btn-secondary\" type=\"button\" id=\"submit-button\" onClick={handleClick}>Show to me!</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div className=\"social-icons\">\r\n    <ul className=\"list-unstyled text-center mb-0\">\r\n      <li className=\"list-unstyled-item\">\r\n        <a href=\"https://twitter.com/riventusaha\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <i className=\"fab fa-twitter\"></i>\r\n        </a>\r\n      </li>\r\n      <li className=\"list-unstyled-item\">\r\n        <a href=\"https://www.facebook.com/riventus.aritonang\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <i className=\"fab fa-facebook-f\"></i>\r\n        </a>\r\n      </li>\r\n      <li className=\"list-unstyled-item\">\r\n        <a href=\"https://instagram.com/rhivent\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <i className=\"fab fa-instagram\"></i>\r\n        </a>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n  </>);\r\n};\r\n\r\nexport default FrontPage;","import React from 'react';\n// import logo from './logo.svg';\nimport FrontPage from \"./FrontPage\";\n\nfunction App() {\n  return (\n    <FrontPage />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}